name: Deploy to ECR

on:
  push:
    branches: ['prod']
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 810177324512.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: hanghae_alpha
  ECS_SERVICE: alphaService
  ECS_CLUSTER: alphaCluster
  ECS_TASK_DEFINITION: .aws/alpha-task-definition.json
  CONTAINER_NAME: alpha-container

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: ECS Task Definition check
        run: echo $ECS_TASK_DEFINITION

      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR,
        id: build-image
        run: |
          docker build -t hanghae_alpha .
          docker tag hanghae_alpha:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
